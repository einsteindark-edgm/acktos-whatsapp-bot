name: CI Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    # Variables de entorno para pruebas
    env:
      PYDANTICAI_ALLOW_MODEL_REQUESTS: 'false'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Setup Environment Variables
      run: |
        # Configurar valores predeterminados
        echo "WHATSAPP_TOKEN=test_token" >> $GITHUB_ENV
        echo "WHATSAPP_PHONE_NUMBER_ID=123456" >> $GITHUB_ENV
        echo "WHATSAPP_VERIFY_TOKEN_WEBHOOK=test_webhook" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=sk-test-dummy-key" >> $GITHUB_ENV
        echo "COSMOSDB_CONNECTION_STRING=mongodb://localhost:27017" >> $GITHUB_ENV
        
        # Log status
        echo "CI: Using default environment for testing"


    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        # Instalar dependencias de sistema
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev
        # Instalar cada dependencia por separado para identificar problemas
        # Primero las dependencias básicas de testing
        pip install pytest pytest-cov pytest-html pytest-asyncio pytest-mock
        # Luego las dependencias principales
        pip install fastapi uvicorn pydantic pydantic-settings python-dotenv python-multipart
        pip install httpx requests requests-mock
        pip install typing-extensions certifi charset-normalizer
        # Instalar pydantic-ai con soporte de mongo
        pip install pydantic-ai mongodb pymongo
        # Finalizar con las dependencias opcionales
        pip install aiohttp openai
        # Intentar instalar azure-cosmos si está disponible
        pip install azure-cosmos || echo "Omitiendo azure-cosmos"
        
        echo "Todas las dependencias fueron instaladas correctamente"
        python -m pip freeze

    - name: Run core tests
      run: |
        # Ejecutar pruebas y generar reporte XML
        pytest tests/ -v --junitxml=pytest-report.xml

    - name: Run agent tests
      run: |
        ./scripts/test_agents.sh

    - name: Test FastAPI application
      run: |
        ./test_fastapi.sh
        
    - name: Generate coverage report
      run: |
        # Crear directorio para informes
        mkdir -p coverage-reports
        # Ejecutar pytest para generar informes HTML y XML
        pytest --cov=app --cov=agents --cov-report=xml --cov-report=html --html=pytest-report.html
        # Mover los informes a la carpeta coverage-reports
        cp coverage.xml coverage-reports/ || echo "No coverage.xml file"
        cp -r htmlcov coverage-reports/ || echo "No htmlcov directory"
        cp pytest-report.html coverage-reports/ || echo "No pytest-report.html file"
        # Listar archivos para verificar
        echo "Archivos generados:"
        ls -la
        ls -la coverage-reports/ || echo "No coverage-reports directory"
      if: always()

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          ./*.xml
          ./*.html
          ./coverage-reports/
          ./htmlcov/
        retention-days: 7
        if-no-files-found: warn

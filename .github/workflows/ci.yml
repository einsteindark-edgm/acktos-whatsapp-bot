name: CI Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Variables de entorno básicas para testing
      OPENAI_API_KEY: sk-test-dummy-key
      PYDANTICAI_ALLOW_MODEL_REQUESTS: 'false'
      WHATSAPP_TOKEN: test_token
      WHATSAPP_PHONE_NUMBER_ID: '123456'
      WHATSAPP_VERIFY_TOKEN_WEBHOOK: test_webhook
      # Conexión a MongoDB para testing
      MONGO_CONNECTION_STRING: mongodb://localhost:27017

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Debug environment
      run: |
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la

    - name: Install dependencies
      run: |
        # Verificar la existencia del script de instalación
        if [ -f ./scripts/install_dependencies.sh ]; then
          echo "Usando script de instalación personalizado..."
          chmod +x ./scripts/install_dependencies.sh
          ./scripts/install_dependencies.sh
        else
          echo "Script de instalación no encontrado, usando fallback..."
          
          python -m pip install --upgrade pip setuptools wheel
          
          # Instalar OpenAI primero para evitar problemas de dependencias
          pip install openai==1.12.0
          
          # Dependencias de testing
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-html
          
          # Dependencias principales
          pip install fastapi==0.110.0 uvicorn[standard]==0.27.1
          pip install pydantic==2.10.6 pydantic-settings==2.1.0
          pip install python-dotenv==1.0.0 python-multipart==0.0.9
          
          # Base de datos MongoDB
          pip install pymongo==4.6.1
          
          # Instalar pydantic-ai con soporte para OpenAI (ya instalado)
          pip install 'pydantic-ai[openai]==0.0.30' || pip install 'pydantic-ai-slim[openai]==0.0.30'
          
          # Utilidades y bibliotecas de red
          pip install httpx==0.27.0 requests==2.31.0 aiohttp==3.9.3
          pip install typing_extensions==4.12.2 certifi==2024.8.30
        fi
        
        echo "Verificando dependencias críticas..."
        echo "- OpenAI:"
        pip show openai
        echo "- Pydantic-AI:"
        pip show pydantic-ai || pip show pydantic-ai-slim
        
        echo "Dependencias instaladas:"
        pip list

    - name: Run basic tests
      run: |
        echo "Verificando estructura del proyecto..."
        ls -la
        echo "Verificando directorio de tests..."
        ls -la tests/ || echo "Directorio tests/ no encontrado"
        
        echo "Ejecutando pruebas básicas..."
        # Las pruebas deben pasar para que el CI sea exitoso
        pytest tests/ -v
    
    - name: Execute PydanticAI tests with mocks
      run: |
        echo "Configurando PYDANTICAI_ALLOW_MODEL_REQUESTS=false para tests"
        export PYDANTICAI_ALLOW_MODEL_REQUESTS=false
        
        # Ejecutar scripts de test si existen
        if [ -f ./scripts/test_agents.sh ]; then
          echo "Ejecutando tests de agentes..."
          chmod +x ./scripts/test_agents.sh
          ./scripts/test_agents.sh
        else
          echo "Scripts de test de agentes no encontrados"
        fi
        
        if [ -f ./test_fastapi.sh ]; then
          echo "Ejecutando tests de FastAPI..."
          chmod +x ./test_fastapi.sh
          ./test_fastapi.sh
        else
          echo "Script de test de FastAPI no encontrado"
        fi

    - name: Generate test reports
      run: |
        # Crear directorio para informes
        mkdir -p test-artifacts
        
        # Generar informe de cobertura
        pytest --cov=app --cov=agents --cov-report=xml --cov-report=html --html=pytest-report.html
        
        # Recopilar informes de prueba
        if [ -f coverage.xml ]; then
          cp coverage.xml test-artifacts/
        fi
        
        if [ -d htmlcov ]; then
          cp -r htmlcov test-artifacts/
        fi
        
        if [ -f pytest-report.html ]; then
          cp pytest-report.html test-artifacts/
        fi
        
        # Crear informe detallado del entorno
        echo "Informe del entorno de CI - $(date)" > test-artifacts/environment-report.txt
        echo "Python version: $(python --version)" >> test-artifacts/environment-report.txt
        echo "Dependencias instaladas:" >> test-artifacts/environment-report.txt
        pip list >> test-artifacts/environment-report.txt
        echo "Variables de entorno configuradas:" >> test-artifacts/environment-report.txt
        echo "PYDANTICAI_ALLOW_MODEL_REQUESTS: $PYDANTICAI_ALLOW_MODEL_REQUESTS" >> test-artifacts/environment-report.txt
        
        echo "Contenido del directorio de artefactos:"
        ls -la test-artifacts/

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          test-artifacts/
          ./coverage.xml
          ./pytest-report.html
          ./htmlcov/
        retention-days: 7
        if-no-files-found: warn
